// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  regd_no String @id
  roll_no String @unique
  name String
  password String @default("1000")
  balance Int  // in paise
  room_no Room?
  class String // TODO
  status Status
  photo String @default("/images/profile_pics/profile.png")
  room  rooms? @relation(fields:[room_no], references: [room_no])
  role UserRoles
  transactions transactions[]
  leaders room_leaders[]
  photocopies photocopy_register[]
}


model rooms {
  room_no Room @id
  members users[]
  room_leaders room_leaders[]
  subscriptions subscriptions[]
}

model room_leaders {
  regd_no String @id
  room_no Room  // check this
  profile users @relation(fields:[regd_no], references: [regd_no])
  rooms rooms @relation(fields:[room_no], references: [room_no])

}

model transactions {
  id Int @id @default(autoincrement())
  regd_no String
  student users @relation(fields:[regd_no], references: [regd_no])
  amount Int
  date DateTime @default(now())
  particulars String?
  department Dept?

}

// room number and type should be key
model subscriptions {
  room_no Room
  room rooms @relation(fields:[room_no], references:[room_no])
  type Subs
  details subscription_details @relation(fields:[type], references:[id])
  @@id([room_no, type])
  
}

model subscription_details {
  id Subs @id
  amount Int // in paise
  department Dept
  active subscriptions[]

}

model photocopy_register {
  id Int @id @default(autoincrement())

  // INFO
  regd_no String
  student users @relation(fields:[regd_no], references: [regd_no])
  order_placed_at DateTime @default(now())
  print_type PrintType @default(PHOTOCOPY)

  // SPECS
  orientation PrintOrientations @default(AS_IT_IS)
  page_layout PrintLayout @default(AS_IT_IS)
  sides PrintDuplexity @default(BACK_TO_BACK)
  pages String?
  num_of_copies Int @default(1)
  particulars String?

  // FILE
  file String @unique
  file_pages Int @default(0)

  // COLLECTION
  call_number String? // e.g. 211219-C
  status PrintStatus @default(PENDING)
  collected_at DateTime?
  notes String?

  // PAYMENT
  cost Int?
  mode_of_pay PaymentMode?
  paid_at DateTime?
  cashless_tid String? @unique
}

model notifications {
  id String @id @default(uuid())
  message String?
  created_at DateTime @default(now())
  from Notifiers
  to String // (all or userid)
  dismissed Boolean
}

enum Notifiers {
  WARDEN
  DIRECTOR
  PHOTOCOPY
}

enum PrintStatus {
  PENDING
  PRINTED
  REJECTED
  COLLECTED
  PAID
}

enum PrintDuplexity {
  SINGLE
  BACK_TO_BACK
}

enum PrintLayout {
  MINI
  MICRO
  HANDOUT
  AS_IT_IS
}

enum PrintOrientations {
  VERTICAL
  HORIZONTAL
  AS_IT_IS
  BEST_FIT
}

enum PrintType {
  PRINTOUT
  PHOTOCOPY
}

enum Subs {
  THE_HINDU
  ECONOMIC_TIMES
  // ask
}

enum Status {
  ACTIVE
  DISABLED
}

enum UserRoles {
  STUDENT
  PHOTOCOPY
  ACCOUNTANT
  TEACHER_ADMIN
  CENTRAL_ADMIN
}

// while updating schema also update actions.ts
enum Room {
  A1
  A2
  A3
  A4
  A5
  A6
  A7
  A8
  B1
  B2
  B3
  B4
  B5
  B6
  B7
  B8
  C1
  C2
  C3
  C4
  C5
  C6
  C7
  C8
  S13
  NA
}

enum Dept {
  NEWSPAPER
  PHOTOCOPY
  TRAVEL
  CASH
  OTHER
}
enum PaymentMode {
  CASHLESS
  CASH
}
